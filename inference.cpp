#include <stdio.h>
#include "tensorflow/lite/interpreter.h"
#include "tensorflow/lite/kernels/register.h"
#include "tensorflow/lite/model.h"
#include "tensorflow/lite/tools/gen_op_registration.h"

using namespace tflite;

int main(){

    std::unique_ptr<tflite::FlatBufferModel> model = tflite::FlatBufferModel::BuildFromFile("mnist.tflite");

    if(!model){
        printf("Failed to mmap model\n");
        exit(0);
    }

    printf("model loaded\n");
    tflite::ops::builtin::BuiltinOpResolver resolver;
    std::unique_ptr<tflite::Interpreter> interpreter;
    tflite::InterpreterBuilder(*model.get(), resolver)(&interpreter);

    // Resize input tensors, if desired.
    interpreter->AllocateTensors();

    std::vector<float> in{0.02745098,0.02745098,0.02745098,0.02745098,0.02745098,0.02745098,0.02745098,0.02745098,0.02745098,0.02745098,0.02745098,0.02745098,0.02745098,0.02745098,0.02745098,0.02745098,0.02745098,0.02745098,0.02745098,0.02745098,0.02745098,0.02745098,0.02745098,0.02745098,0.02745098,0.02745098,0.02745098,0.02745098,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.02745098,0.047058824,0.050980393,0.043137256,0.03137255,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.050980393,0.27450982,0.5764706,0.7058824,0.7254902,0.69803923,0.6392157,0.50980395,0.31764707,0.12941177,0.02745098,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.11764706,0.58431375,0.93333334,1.0,1.0,1.0,1.0,1.0,1.0,0.96862745,0.8352941,0.46666667,0.101960786,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.09019608,0.6627451,0.9882353,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.98039216,0.68235296,0.14117648,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.02745098,0.4509804,0.9764706,1.0,1.0,0.99607843,0.9607843,0.9411765,0.9529412,0.9764706,0.99607843,1.0,1.0,1.0,0.99215686,0.6862745,0.078431375,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.14901961,0.84313726,1.0,1.0,0.9882353,0.70980394,0.29803923,0.22745098,0.25490198,0.32941177,0.5137255,0.80784315,0.9882353,1.0,1.0,0.9411765,0.31764707,0.02745098,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.023529412,0.44705883,0.9843137,1.0,1.0,0.8117647,0.14509805,0.019607844,0.019607844,0.019607844,0.019607844,0.023529412,0.13725491,0.6509804,0.98039216,1.0,1.0,0.84705883,0.19215687,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.08235294,0.7607843,1.0,1.0,0.98039216,0.42352942,0.023529412,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.09803922,0.7137255,1.0,1.0,0.99607843,0.6156863,0.0627451,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.24313726,0.9372549,1.0,1.0,0.8509804,0.14117648,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.36862746,0.9647059,1.0,1.0,0.95686275,0.39607844,0.023529412,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.43529412,0.99215686,1.0,1.0,0.60784316,0.03529412,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.08235294,0.70980394,0.99607843,1.0,1.0,0.81960785,0.13333334,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.03137255,0.63529414,1.0,1.0,0.9843137,0.38431373,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.20784314,0.8509804,1.0,1.0,0.9843137,0.41960785,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.06666667,0.7647059,1.0,1.0,0.93333334,0.22352941,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.02745098,0.45490196,0.9843137,1.0,1.0,0.70980394,0.05490196,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.08235294,0.79607844,1.0,1.0,0.8980392,0.16078432,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.19215687,0.9137255,1.0,1.0,0.8117647,0.09019608,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.07450981,0.78431374,1.0,1.0,0.92156863,0.20392157,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.023529412,0.36862746,0.9607843,1.0,1.0,0.76862746,0.07058824,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.039215688,0.6666667,1.0,1.0,0.9882353,0.5019608,0.039215688,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.023529412,0.23921569,0.8509804,1.0,1.0,0.99607843,0.54901963,0.02745098,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.39215687,0.9764706,1.0,1.0,0.9254902,0.49019608,0.1764706,0.050980393,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.07450981,0.3882353,0.84705883,0.99607843,1.0,1.0,0.87058824,0.2,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.11764706,0.78431374,1.0,1.0,1.0,0.9843137,0.8901961,0.68235296,0.43529412,0.2784314,0.22745098,0.2509804,0.39215687,0.7176471,0.9607843,1.0,1.0,1.0,0.94509804,0.4,0.03137255,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.023529412,0.29411766,0.88235295,1.0,1.0,1.0,1.0,1.0,0.99215686,0.9607843,0.9411765,0.9490196,0.9843137,1.0,1.0,1.0,1.0,0.9529412,0.5019608,0.050980393,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.03137255,0.28627452,0.7882353,0.98039216,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.99215686,0.8509804,0.40392157,0.05882353,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.023529412,0.1254902,0.4117647,0.7019608,0.9019608,0.9843137,1.0,1.0,1.0,1.0,1.0,0.99215686,0.89411765,0.58431375,0.18039216,0.02745098,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.05490196,0.1882353,0.3882353,0.57254905,0.69411767,0.72156864,0.7058824,0.627451,0.43529412,0.1882353,0.039215688,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.023529412,0.043137256,0.050980393,0.043137256,0.03137255,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844,0.019607844};

    printf("%d\n", in.size());

    int image_width = 28;
    int image_height = 28;

    int input = interpreter->inputs()[0];
    float* input_data_ptr = interpreter->typed_tensor<float>(input);
    for (int i = 0; i < image_width; ++i) {
        for (int j = 0; j < image_height; j++) {
            *(input_data_ptr) = (float)in[i*image_width + j];
            input_data_ptr++;
        }
    }

    interpreter->Invoke();

    int output_idx = interpreter->outputs()[0];
    float* output = interpreter->typed_tensor<float>(output_idx);

    int max = 0;
    int output_size = 10;

    for (int i=0; i<output_size; i++){
        printf("%f\n", output[i]);
    }
}   